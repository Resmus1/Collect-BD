import os
import json
import csv


def to_set(value):
    if isinstance(value, list):
        return set(str(v).strip() for v in value if v)
    elif isinstance(value, str) and value.strip():
        return {value.strip()}
    return set()


def check_data(item, name):
    return to_set(item.get(name))


def check_social(item, name):
    return to_set(item.get('socials', {}).get(name))


input_base = 'output'
output_base = 'output_csv'
os.makedirs(output_base, exist_ok=True)

fieldnames = [
    '–ò–º—è', '–†–µ–≥–∏–æ–Ω', '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    '–°–∞–π—Ç—ã', '–¢–µ–ª–µ—Ñ–æ–Ω—ã', 'Email', 'WhatsApp'
]

firm_dict = {}
total_files = 0
total_items = 0

region_stats = {}  # {region: {'total': int, 'unique': set()}}

for region in os.listdir(input_base):
    region_path = os.path.join(input_base, region)
    if not os.path.isdir(region_path):
        continue

    for category in os.listdir(region_path):
        category_path = os.path.join(region_path, category)
        if not os.path.isdir(category_path):
            continue

        for sub_file in os.listdir(category_path):
            if not sub_file.endswith('.json'):
                continue

            total_files += 1
            subcategory = os.path.splitext(sub_file)[0]
            json_path = os.path.join(category_path, sub_file)

            try:
                with open(json_path, 'r', encoding='utf-8') as f_json:
                    data = json.load(f_json)
            except json.JSONDecodeError:
                print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∞–π–ª–æ–º: {json_path}")
                continue

            total_items += len(data)
            valid_count = 0

            for item in data:
                name = item.get('name')
                if not name:
                    continue

                if not item.get('website') or not str(item.get('website')).strip():
                    continue  # ‚õîÔ∏è –ü—Ä–æ–ø—É—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –±–µ–∑ —Å–∞–π—Ç–∞

                name = name.strip()

                key = f"{region}__{name}"

                if key not in firm_dict:
                    firm_dict[key] = {
                        '–ò–º—è': name,
                        '–†–µ–≥–∏–æ–Ω': region,
                        '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏': set(),
                        '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏': set(),
                        '–°–∞–π—Ç—ã': set(),
                        '–¢–µ–ª–µ—Ñ–æ–Ω—ã': set(),
                        'Email': set(),
                        'WhatsApp': set()
                    }

                entry = firm_dict[key]
                entry['–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'].add(category)
                entry['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'].add(subcategory)
                entry['–°–∞–π—Ç—ã'].update(check_data(item, 'website'))
                entry['–¢–µ–ª–µ—Ñ–æ–Ω—ã'].update(check_data(item, 'phones'))
                entry['Email'].update(check_data(item, 'email'))
                entry['WhatsApp'].update(check_social(item, 'WhatsApp'))

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
                if region not in region_stats:
                    region_stats[region] = {'total': 0, 'unique_keys': set()}

                region_stats[region]['total'] += 1
                region_stats[region]['unique_keys'].add(key)

                valid_count += 1

            print(
                f'‚úÖ {region}/{category}/{subcategory} | –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É: {valid_count}')

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø–∏—Å–∏
all_rows = []
for entry in firm_dict.values():
    row = {
        '–ò–º—è': entry['–ò–º—è'],
        '–†–µ–≥–∏–æ–Ω': entry['–†–µ–≥–∏–æ–Ω'],
        '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏': ', '.join(sorted(entry['–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'])),
        '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏': ', '.join(sorted(entry['–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'])),
        '–°–∞–π—Ç—ã': ', '.join(sorted(entry['–°–∞–π—Ç—ã'])),
        '–¢–µ–ª–µ—Ñ–æ–Ω—ã': ', '.join(sorted(entry['–¢–µ–ª–µ—Ñ–æ–Ω—ã'])),
        'Email': ', '.join(sorted(entry['Email'])),
        'WhatsApp': ', '.join(sorted(entry['WhatsApp'])),
    }
    all_rows.append(row)

# –ó–∞–ø–∏—Å—å –≤ CSV
output_file = os.path.join(output_base, 'aggregated_with_website.csv')
with open(output_file, 'w', newline='', encoding='utf-8') as f_csv:
    writer = csv.DictWriter(f_csv, fieldnames=fieldnames, delimiter=';')
    writer.writeheader()
    writer.writerows(all_rows)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print('\nüìç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:')
for region, stats in region_stats.items():
    total = stats['total']
    unique = len(stats['unique_keys'])
    duplicates = total - unique
    print(f'üî∏ {region}:')
    print(f'   ‚îú‚îÄ –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {total}')
    print(f'   ‚îú‚îÄ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {unique}')
    print(f'   ‚îî‚îÄ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏: {duplicates}')

print('\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
print(f'üîπ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_files}')
print(f'üîπ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö: {total_items}')
print(f'üîπ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –∏–º–µ–Ω–∏ –∏ —Ä–µ–≥–∏–æ–Ω—É: {len(all_rows)}')
print(f'üìÅ CSV —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_file}')
